Recognizing Patterns for Software Development
Managing a large scale software development requires the use of quantitative models to provide insight and support control based upon historical data from similar projects. Basili introduces a paradigm of measurement based, improvement-oriented software development, called the Improvement Paradigm [1]. This paradigm provides an experimental view of the software activities with a focus on learning and improvement. This implies the need for quantitative approaches for the following uses: to build models of the software process, product, and other forms of experience (e.g., effort, schedule, and reliability) for the purpose of prediction. to recognize and quantify the influential factors (e.g. personnel capability, storage constraints) on various issues of interest (e.g. productivity and quality) for the purpose of understanding and monitoring the development. to evaluate software products and processes from different perspectives (e.g. productivity, fault rate) by comparing them with projects with similar characteristics. to understand what we can and cannot predict and control so we can monitor it more carefully.