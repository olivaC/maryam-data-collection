Commutativity condition refinement
We present a technique for automatically generating commutativity conditions from (abstract-level) data-structure specifications. We observe that one can pose the commutativity question in a way that does not introduce additional quantifiers, via a mechanized lifting of a (potentially partial) specification to an equivalent total specification. We then describe an algorithm that iteratively refines an under-approximation of the commutativity (and non-commutativity) condition for two datastructure methods m and n into an increasingly precise version. Our algorithm terminates if/when the entire state space has been considered, and can be aborted at any time to obtain a partial, sound commutativity condition. We prove soundness, relative completeness, describe how to obtain input predicates, and discuss heuristics to improve qualitative aspects of our algorithmâ€™s output. We have implemented our technique in a tool called SERVOIS, which uses an SMT solver. We show that we can automatically generate symbolic commutativity conditions for a range of data structures including Set, HashTable, Accumulator, Counter, and Stack. This work has the potential to impact a variety of contexts, in particular, multicore software where it has been realized that commutativity is at the heart of increased concurrency.