Evolution vs. intelligent design in program patching
While fixing bugs requires significant manual effort, recent research has shown that genetic programming (GP) can be used to search through a space of programs to automatically find candidate bug-fixing  patches.   Given  a  program,  and  a  set  of  test  cases  (someof which fail),  a GP-based repair technique evolves a patch or apatched program using program mutation and selection operators.We evaluate GenProg, a well-known GP-based patch generator, us-ing a large, diverse data set of over a thousand simple (both buggy and  correct)  student-written  homework  programs,  using  two  dif-ferent test sets:  a white-box test set constructed to achieve edgecoverage on an oracle program, and a black-box test set developed to exercise the desired specification.  We find that GenProg often succeeds at finding a patch that will cause student programs to pass supplied white-box test cases; however, that the solution quite of-ten overfits to the supplied tests and doesn’t pass all the black-boxtests.  In contrast, when students patch their own buggy programs,these patches tend to pass the black-box tests as well. We also findthat the GenProg-generated patches lack enough diversity to benefit from a kind of bagging, in which a plurality vote over a populationof GP-generated patches outperforms a randomly chosen individual patch. We report these results and additional relationships between GenProg’s success and the size and complexity of the manual and automatic patches