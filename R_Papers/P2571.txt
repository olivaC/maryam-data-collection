Calibrated mutation testing
During mutation testing, artificial defects are inserted into a program, in order to measure the quality of a test suite and to provide means for improvement. These defects are generated using predefined mutation operators-inspired by faults that programmers tend to make. As the type of faults varies between different programmers and projects, mutation testing might be improved by learning from past defects-Does a sample of mutations similar to past defects help to develop better tests than a randomly chosen sample of mutations? In this paper, we present the first approach that uses software repository mining techniques to calibrate mutation testing to the defect history of a project. Furthermore, we provide an implementation and evaluation of calibrated mutation testing for the Jaxen project. However, first results indicate that calibrated mutation testing cannot outperform random selection strategies.