Verification, Algorithms
This paper introduces iProperty, a novel approach that fa-cilitates incremental checking of programs based on a prop-erty di↵erencing technique. Specifically, iProperty aims to reduce the cost of checking properties as they are initially developed and as they co-evolve with the program. The key novelty of iProperty is to compute the di↵erences between the new and old versions of expected properties to reduce the number and size of the properties that need to be checked during the initial development of the properties. Further-more, property di↵erencing is used in synergy with program behavior di↵erencing techniques to optimize common regres-sion scenarios, such as detecting regression errors or checking feature additions for conformance to new expected proper-ties. Experimental results in the context of symbolic exe-cution of Java programs annotated with properties written as assertions show the e↵ectiveness of iProperty in utilizing change information to enable more ecient checking.