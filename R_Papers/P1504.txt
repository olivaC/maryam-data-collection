HARE++: Hardware Assisted Reverse Execution Revisited
Bidirectional debugging is a promising and powerful debugging technique that can help programmers backtrack and find the causes of program errors faster. A key component of bidirectional debugging is checkpointing, which allows the debugger to restore the program to any previously encountered state, but can incur significant performance and memory overheads that can render bidirectional debugging unusable. Multiple software and hardware checkpointing techniques have been proposed. Software provides better memory management through checkpoint consolidation, while hardware can create checkpoints at low performance cost which unfortunately are not consolidation-friendly. HARE was the first hardware technique to create consolidatable checkpoints in order to reduce the overall performance and memory costs. In this paper we are proposing HARE++, a redesign of the original HARE that addresses the shortcomings of the original technique. HARE++ reduces the reverse execution latency by 3.5-4 times on average compared to HARE and provides the ability to construct both undo and redo-log checkpoints allowing the seamless movement over the execution time of the program. At the same time HARE++ maintains the performance advantages of HARE, incurring < 2% performance overhead on average across all benchmarks, and allows the consolidation of checkpoints with memory requirements similar to HARE.