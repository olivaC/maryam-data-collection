Baradâ€“A GUI Testing Framework Based on Symbolic Execution
While Graphical User Interfaces (GUIs) have become ubiquitous, testing them remains largely adhoc. Since the state of a GUI is modified by events on the GUI widgets, a useful approach is to consider test input for a GUI as an event sequence. Due to the combinatorial nature of these sequences, testing a GUI thoroughly is problematic and time-consuming. Moreover, the possible values for certain GUI widgets, such as a textbox, are also combinatorial compounding the problem. This paper presents Barad, a novel GUI testing framework based on symbolic execution. Barad addresses uniformly event-flow as well as data-flow in GUI applications: generating tests in the form of event sequences and data inputs. We generate test cases as chains of event listener method invocations and map these chains to event sequences that force the execution of those invocations. Since listeners for some events in the GUI are not present, this approach prunes significant regions of the event input space. We introduce symbolic widgets as a higher level of abstraction, which enables symbolic execution of GUI applications. We obtain data inputs through executing symbolically the generated test cases (chains of event listener method invocations). Barad generates significantly fewer tests compared to traditional GUI testing techniques, while improving branch and statement coverage.