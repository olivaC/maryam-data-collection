Sketch4J: Execution-Driven Sketching for Java
Sketching is a relatively recent approach to program synthesis, which has shown much promise. e key idea in sketching is to allow users to write partial programs that have “holes” and provide test harnesses or reference implementations, and let synthesis tools create program fragments that ll the holes such that the resulting complete program has the desired functionality. Traditional solutions to the sketching problem perform a translation to SAT and employ CEGIS. While eective for a range of programs, when applied to real applications, such translation-based approaches have a key limitation: they require either translating all relevant libraries that are invoked directly or indirectly by the given sketch – which can lead to impractical SAT problems – or creating models of those libraries – which can require much manual eort. is paper introduces execution-driven sketching, a novel approach for synthesis of Java programs using a backtracking search that is commonly employed in soware model checkers. e key novelty of our work is to introduce eective pruning strategies to eciently explore the actual program behaviors in presence of libraries and to provide a practical solution to sketching small parts of real-world applications, which may use complex constructs of modern languages, such as reection or native calls. Our tool Sketch4J embodies our approach in two forms: a stateful search based on the Java PathFinder model checker; and a stateless search based on re-execution inspired by the VeriSo model checker. Experimental results show that Sketch4J’s performance compares well with the well-known SAT-based Sketch system for a range of small but complex programs, and moreover, that Sketch4J can complete some sketches that require handling complex constructs.