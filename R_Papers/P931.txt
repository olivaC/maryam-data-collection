Invariant discovery guided by symbolic execution
Program invariants are useful for software implementation, testing, and maintenance activities. However, invariants are difficult to discover, and can take intensive manual effort to validate. A large body of research has focused on automated invariant discovery. The most widely used techniques for invariant discovery (e.g., Daikon) are based on dynamic test execution traces. Although these techniques can efficiently generate a large number of invariants for real-world programs, there are two main issues: (1) they may generate a number of incorrect or imprecise invariants; and (2) they may miss correct invariants. In this paper, we describe preliminary work on iDiscovery, an iterative approach that uses symbolic execution results to guide the invariant generation process. More precisely, iDiscovery uses symbolic execution to refute incorrect invariants, refine imprecise invariants, and characterize new behaviors to help achieve more accurate invariant discovery.