Distributed concolic algorithm of the SCORE framework
This section presents an overview of the original (non-distributed) concolic testing pro-cess that performs static instrumentation of a target program to extract symbolic path formulas, which is the way SCORE operates. The concolic testing process proceeds via the following steps: 1. Declaration of symbolic variables. Initially, a user must specify which variables should be handled as symbolic variables, based on which symbolic path formulas are constructed. 2. Instrumentation. A target source program is statically instrumented with probes, which record symbolic path conditions from a concrete execution path when the target program is executed. For example, at each conditional branch, a probe is inserted to record the branch condition/symbolic path condition; then, the instrumented program is compiled into an executable binary file. 3. Concrete execution. The instrumented binary is executed with given input val-ues. For the first execution of the program, initial input values are assigned randomly. From the second execution onwards, input values are obtained from Step 6. 4. Obtain a symbolic path formula ϕ i . The symbolic execution part of the concolic execution collects symbolic path conditions over the symbolic input values at each branch point encountered for along the concrete execution path for a test case tc i . Whenever each statement s of the target program is executed, a corresponding probe inserted at s updates the map of symbolic variables if s is an assignment statement, or collects a corresponding symbolic path condition, c, if s is a branch statement. Thus, a symbolic path formula ϕ i is built at the end of the ith execution as c 1 ∧ c 2 ... ∧ c n where c n is the last path condition executed and c k is executed earlier than c k+1 for all 1 ≤ k < n.