Case study 2 Report: Secure Web Architectures
For the Web, security was for a long time an issue that was devoted to the underlying network layer. The declarative approach of the Web of documents used HTML4 and CSS and did not offer a very high attacking surface. With the movement of the Web towards being the Open Web Platform for Applications, this has changed. More and more vital applications in the area of government, economy and social life use the web as their platform of choice. And those higher value applications and services made it much more interesting for attackers to spend time finding loopholes on the Open Web Platform. Additionally, the Community needed to respond to the attack against the Internet via Pervasive Monitoring and the challenges laid down in RFC7258[77]. The Community reacted to those challenges with a variety of improvements and tools that web application developers can use to increase security, confidentiality and privacy for work. This includes improvements in the protocol sector, the widespread use of encryption and a number of tools to address the vulnerabilities created by the new functionality introduced by the Open Web Platform. Some of those security tools are still in their infancy, but look promising. Some tools need support to take off. Some have the potential to have landscape changing effects by tying the trust chain to new actors. After the systematic evaluation of the Web Security landscape by the Web-platform Security Guide[59], this document describes the toolbox now available at a rather high level and picks the three main topics where STREWS is able to provide high impact advances for Web security to the Community. Secure Web Architectures thus suggests to further the compartimentalisation and modularisation of web applications by allowing developers to sandbox certain modules. While the Community has already thought about it very recently, STREWS comes with a well thoughtout proposal that may allow the Community to advance more quickly. Another area of active research with potential high impact is the question on how to secure sessions on the Web. Session management is a crucial component in every modern web application. It links subsequent requests together, enabling a rich and interactive user experience. But sessions can be hijacked with potentially high damages. STREWS makes suggestions on how to further improve sessions by suggesting the SecSess approach that effectively prevents the unauthorized transfer of an established session, by eradicating the bearer token properties of the session identifier. Finally, Cross-site Scripting attacks remain to be one of the fastest growing and most severe threats on the Open Web Platform. Considerable work is already done in the IETF’s WebSec Working Group and in the W3C’s Web Application Security Working Group, but several open problems remain to be addressed in the future. STREWS suggests to include recent research advances in this field in the works already under way to improve mitigating tools like Content Security Policies.