Special issue for the ICST 2013 conference
This special issue includes extended versions of four of the best papers of ICST 2013. The conference attracted over 150 submissions, including both research and industry papers, which demonstrates the strong ongoing interest in the field. Each submission was evaluated by at least three members of the Technical Program Committee. Based on these reviews, and on extensive on‐line discussions involving the entire technical Program Committee, we finally accepted 30 research papers and eight industry papers, two of which were short. The selected papers cover a variety of topics, including test‐input generation, formal verification, mutation testing, debugging, fault localization and repair, concurrency testing, model based testing, test‐case selection, prioritization and minimization, program analysis, and crowdsourcing based testing. After selecting these 30 papers, the entire Technical Program Committee voted to select the best papers amongst the ones accepted. The vote focused on a selection of papers that had at least one strong champion and did not receive any negative scores. Votes had to consider the scores, the relevance of the paper, and the originality of the work. The five papers that received the highest number of votes were invited for this special issue. The authors of one of the papers declined the invitation; revised versions of the other four papers went through the standard STVR review process and are included here. In the rest of this foreword, we summarize these four contributions. In the paper “Are Concurrent Coverage Metrics Effective for Testing: A Comprehensive Empirical Investigation,” Hong and colleagues explore the impact of concurrent coverage metrics on testing effectiveness. They also examine the relationship between coverage, fault detection, and test suite size. Their results (1) indicate that the metrics are moderate to strong predictors of concurrent testing effectiveness and (2) highlight the need for additional work on concurrent coverage. In the paper ”Coverage‐Based Regression Test Case Selection, Minimisation and Prioritisation: An Industrial Case Study,” Di Nardo and colleagues apply coverage‐based regression testing techniques on a real‐world system with real regression faults. Their main insight is that test suite minimization performed using finer grained coverage criteria can provide a good trade‐off between savings in execution cost and fault‐detection capability. In the paper “CHECK‐THEN‐ACT Misuse of Java Concurrent Collections,” Lin and colleagues present an extensive empirical study of CHECK‐THEN‐ACT idioms in Java concurrent collections. Their analysis of 6.4M lines of code that use Java concurrent collections shows that (1) CHECK‐THEN‐ACT idioms are commonly misused in practice, and (2) correcting them is important. In the paper “Defect Prediction as a Multi‐Objective Optimization Problem,” Canfora and colleagues formalize the defect prediction problem as a multi‐objective optimization problem. Their multi‐objective approach allows software engineers to choose predictors that achieve a specific trade‐off between the number of likely defect‐prone classes and the number of lines of code to be analyzed/tested. Many members of our community contributed to this special issue and we would like to extend our most heartfelt thanks to everyone who worked hard to make this possible. In particular, we want to thank the authors, who devoted significant time and effort to extending their ICST papers. We also want to thank the reviewers, who wrote detailed reviews and provided extremely valuable feedback that the authors took into account when preparing the final version of the papers that are presented here.